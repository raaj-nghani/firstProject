package chapter5

object use_traits_for_dependency_injection_1 extends App{
  println("Step 1: How to define a class to encapsulate inventory services")
  class DonutInventoryService[T]{
    def checkStock(donut: T): Boolean = {
      println("DonutInventoryService -> checkStock")
      true
    }
  }

  println("\nStep 2: How to define a class to encapsulate pricing services")
  class DonutPricingService[T]{
    def calculatePrice(donut: T):Double ={
      println("DonutPricingService -> calculatePrice")
      2.50
    }
  }

  println("\nStep 3: How to define a class to encapsulate creating a donut order")
  class DonutOrderService[T]{
    def createOrder(donut: T, quantity: Int, price: Double): Int = {
      println(s"Saving donut order to database: donut = $donut, quantity = $quantity, price = $price")
      100
    }
  }

  println("\nStep 4: How to define a class to encapsulate shopping cart services")

  class DonutShoppingCartService[T](
                                     donutInventoryService: DonutInventoryService[T],
                                     donutPricingService: DonutPricingService[T],
                                     donutOrderService: DonutOrderService[T]) {

    def bookOrder(donut: T, quantity: Int): Int = {
      println("DonutShoppingCartService->bookOrder")

      donutInventoryService.checkStock(donut) match {
        case true =>
          val price = donutPricingService.calculatePrice(donut)
          donutOrderService.createOrder(donut, quantity, price) // the id of the booked order

        case false =>
          println(s"Sorry donut $donut is out of stock!")
          -100 // return some error code to identify out of stock
      }
    }
  }

  println("\nStep 5: How to define a trait to encapsulate all the services for Donut store")
  trait DonutStoreServices{
    val donutInventoryService = new DonutInventoryService[String]
    val donutPricingService = new DonutPricingService[String]
    val donutOrderService = new DonutOrderService[String]
    val donutShoppingCartService = new DonutShoppingCartService(donutInventoryService, donutPricingService, donutOrderService)

  }

  println("\nStep 6: How to define a facade to expose functionality of DonutStoreServices")
  trait DonutStoreAppController {
    this : DonutStoreServices =>
    def bookORder(donut:String, quantity: Int): Int ={
      println("DonutStoreAppController -> bookOrder")
      donutShoppingCartService.bookOrder(donut, quantity)
    }
  }

  println("\nStep 7: How to create a Donut store app which extends facade from Step 5 and injects the required donut services from Step 4")
  object DonutStoreApp extends DonutStoreAppController with DonutStoreServices

  println("\nStep 8: How to call the bookOrder method of the Donut store app from Step 7")
  DonutStoreApp.bookORder("Vanilla Donut", 10)

  println("\nStep 8: How to call the bookOrder method of the Donut store app from Step 7")
  trait MockedDonutStoreServices extends DonutStoreServices {
    override val donutInventoryService: DonutInventoryService[String] = ???
    override val donutPricingService: DonutPricingService[String] = ???
    override val donutOrderService: DonutOrderService[String] = ???
    override val donutShoppingCartService: DonutShoppingCartService[String] = new DonutShoppingCartService[String](
      donutInventoryService, donutPricingService, donutOrderService
    )
  }

  println("\nStep 1: Create a Mocked Donut Store App and inject mocked donut services")
  object MockedDonutStoreApp extends DonutStoreAppController with MockedDonutStoreServices

}


OUTPUT

/home/raj/jdk1.8.0_202/bin/java -javaagent:/home/raj/Downloads/idea-IC-222.4167.29/lib/idea_rt.jar=43671:/home/raj/Downloads/idea-IC-222.4167.29/bin -Dfile.encoding=UTF-8 -classpath /home/raj/jdk1.8.0_202/jre/lib/charsets.jar:/home/raj/jdk1.8.0_202/jre/lib/deploy.jar:/home/raj/jdk1.8.0_202/jre/lib/ext/cldrdata.jar:/home/raj/jdk1.8.0_202/jre/lib/ext/dnsns.jar:/home/raj/jdk1.8.0_202/jre/lib/ext/jaccess.jar:/home/raj/jdk1.8.0_202/jre/lib/ext/jfxrt.jar:/home/raj/jdk1.8.0_202/jre/lib/ext/localedata.jar:/home/raj/jdk1.8.0_202/jre/lib/ext/nashorn.jar:/home/raj/jdk1.8.0_202/jre/lib/ext/sunec.jar:/home/raj/jdk1.8.0_202/jre/lib/ext/sunjce_provider.jar:/home/raj/jdk1.8.0_202/jre/lib/ext/sunpkcs11.jar:/home/raj/jdk1.8.0_202/jre/lib/ext/zipfs.jar:/home/raj/jdk1.8.0_202/jre/lib/javaws.jar:/home/raj/jdk1.8.0_202/jre/lib/jce.jar:/home/raj/jdk1.8.0_202/jre/lib/jfr.jar:/home/raj/jdk1.8.0_202/jre/lib/jfxswt.jar:/home/raj/jdk1.8.0_202/jre/lib/jsse.jar:/home/raj/jdk1.8.0_202/jre/lib/management-agent.jar:/home/raj/jdk1.8.0_202/jre/lib/plugin.jar:/home/raj/jdk1.8.0_202/jre/lib/resources.jar:/home/raj/jdk1.8.0_202/jre/lib/rt.jar:/home/raj/IdeaProjects/firstProject/target/scala-2.13/classes:/home/raj/.cache/coursier/v1/https/repo1.maven.org/maven2/joda-time/joda-time/2.9.3/joda-time-2.9.3.jar:/home/raj/.cache/coursier/v1/https/repo1.maven.org/maven2/org/joda/joda-convert/1.8/joda-convert-1.8.jar:/home/raj/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.9/scala-library-2.13.9.jar chapter5.use_traits_for_dependency_injection_1
Step 1: How to define a class to encapsulate inventory services

Step 2: How to define a class to encapsulate pricing services

Step 3: How to define a class to encapsulate creating a donut order

Step 4: How to define a class to encapsulate shopping cart services

Step 5: How to define a trait to encapsulate all the services for Donut store

Step 6: How to define a facade to expose functionality of DonutStoreServices

Step 7: How to create a Donut store app which extends facade from Step 5 and injects the required donut services from Step 4

Step 8: How to call the bookOrder method of the Donut store app from Step 7
DonutStoreAppController -> bookOrder
DonutShoppingCartService->bookOrder
DonutInventoryService -> checkStock
DonutPricingService -> calculatePrice
Saving donut order to database: donut = Vanilla Donut, quantity = 10, price = 2.5

Step 8: How to call the bookOrder method of the Donut store app from Step 7

Step 1: Create a Mocked Donut Store App and inject mocked donut services

Process finished with exit code 0
