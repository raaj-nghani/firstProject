package chapter3
import scala.util.control.TailCalls._
object TrampolineTailRecursiveFunction extends App{
  println("Step 1: How to define a trampoline function using scala.util.control.TailCalls._")
  def verySweetDonut(donutList: List[String]):TailRec[Boolean] ={
    println(s"verySwwetDonut function: donut list = $donutList")
    if (donutList.isEmpty){
      println("verySweetDonut function : donut list is Empyt, returning false")
      done(false)
    } else {
      if(Set(donutList.head).subsetOf(Set("Vanilla Donut","Strawberry","Glazed Donut"))){
        done(true)
      } else {
        println(s"verySweetDonut function: donut list's head = ${donutList.head} is NOT VERY sweet, forwarding donut list's to notSweetDonut function")
        tailcall(notSweetDonut(donutList))
      }
    }


    println("Step 2: How to define a trampoline function using scala.util.control.TailCalls._")
    def notSweetDonut(donutList: List[String]): TailRec[Boolean] = {
      println(s"notSweetDonut function : with donut list = $donutList")
      if (donutList.isEmpty){
        println("NotSweetDonut function: donut list isEmpty, returning flase")
        done(false)
      } else {
        println(s"notSweetDonut function: donut list's head = ${donutList.head} is NOT sweet,   forwarding donut list's tail to verySweetDonut function")
        tailcall((verySweetDonut(donutList.tail)))
      }

      println("\nStep 3: How to call a trampoline tail recursive function")
      val donutList: List[String] = List ("Plain Donut","Strawberry Donut","Plain Donut","Glazed Donut")
      val foundVerySweetDonut = tailcall(varySweetDonut(donutList)).result
      println(s"found very sweet donut = $foundVerySweetDonut")
    }
  }

}
