package chapter3

object NestedFunction extends App{

  //val dList = List("Mango","Orange","Apple","Grapes","Banana")
println("Step 1: How to define a function")
  def checkDonutAvailability(donutName: String): Boolean ={
    val listDonutsFromStock: List[String] = List("Vanilla Donut","Strawberry Donut", "Plain Donut","Glazed Donut")
    val iDonutInStock = (donutName.nonEmpty && donutName.length >0) && (listDonutsFromStock contains donutName)
    iDonutInStock
  }
  println("\nStep2: How to call a function")
  println(s"Calling  checkDonutAvailability with Vanilla Donut = ${checkDonutAvailability("Vanilla Donut")}")

  println("\n Step 3: How to define a nested function")
  def checkDonutAvailabilityWithNestedFunction(donutName: String): Boolean ={
    val listDonutsFromStock = List[String]("Vanilla Donut","Strawberry Donut", "Plain Donut","Glazed Donut")
    val validate = (name :String) => {
      name.nonEmpty && name.length > 0
    }
    val isDonutInStock = validate(donutName) && (listDonutsFromStock contains donutName)
    isDonutInStock
  }
  println("\nStep 4: How to call a Nested Function")
  println(s"Calling checkDonutAvailabilityWithNestedFunction with Vanilla Donut = ${checkDonutAvailabilityWithNestedFunction("Vanilla Donut")}")

}


OUTPUT


Step 1: How to define a function

Step2: How to call a function
Calling  checkDonutAvailability with Vanilla Donut = true

 Step 3: How to define a nested function

Step 4: How to call a Nested Function
Calling checkDonutAvailabilityWithNestedFunction with Vanilla Donut = true

Process finished with exit code 0

